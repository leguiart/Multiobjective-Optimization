from hklearn_genetic.utils import ProblemUtils
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import math
from pymoo.factory import get_reference_directions
from pymop.factory import get_problem, get_uniform_weights
from hklearn_genetic.Evaluators.FunctionEvaluators import DTLZ1
from hklearn_genetic.Problems import RealGAProblem
from hklearn_genetic.NSGAIII import NSGAIII, _calculate_ideal, _calculate_worst
from hklearn_genetic.Problems.BaseGAProblem import Individual
import unittest

def _to_individual_fitness(X_mat):
    individuals = []
    for i in range(len(X_mat)):
        individual = Individual()
        individual.fitness_metric = X_mat[i]
        individuals += [individual]
    return individuals

class NSGA3Tests(unittest.TestCase):
    def setUp(self):
        #Defining evaluators
        self.dtlz1 = DTLZ1()

        #Defining problems
        #Real SBX crossover and polynomial mutation
        self.dtlz1_real_sbx = RealGAProblem._BaseRealGAProblem(self.dtlz1, -0.001, (0, 1), pc = 1., pm = 1/12, n_dim=12)

    def test_ideal_point_initial(self):
        ##Ideal point initial test
        ideal = None
        test_values1 = [
            [39.6809093261859, 78.95589182320498, 308.3212999529744], 
            [207.49730880005058, 272.8275352135604, 7.349130527444723], 
            [456.98037664700513, 40.54771379691928, 35.01332229667585], 
            [186.24322260124117, 2.8165811202693436, 182.57561907660292], 
            [169.26223028401003, 5.785818355238714, 290.75413504095286], 
            [100.5985566311103, 150.70463032094327, 170.27710817794312], 
            [451.2339015757547, 76.37546915887845, 42.826157092715135], 
            [6.15021593812187, 181.38492653497056, 81.72419505729094], 
            [0.0, 3.22, 308.3539407496831], 
            [671.3367979657985, 4.96887807671706, 43.09754186990102], 
            [45.787531575808394, 519.3476314387366, 14.826325407527342], 
            [39.6809093261859, 78.95589182320498, 308.3212999529744], 
            [207.49730880005058, 272.8275352135604, 7.349130527444723], 
            [456.98037664700513, 40.54771379691928, 35.01332229667585],
            [186.24322260124117, 2.8165811202693436, 182.57561907660292], 
            [169.26223028401003, 5.785818355238714, 290.75413504095286], 
            [100.5985566311103, 150.70463032094327, 170.27710817794312], 
            [451.2339015757547, 76.37546915887845, 42.826157092715135], 
            [6.15021593812187, 181.38492653497056, 81.72419505729094], 
            [0.0, 0.0, 308.3539407496831],
            [671.3367979657985, 4.96887807671706, 43.09754186990102], 
            [45.787531575808394, 519.3476314387366, 14.826325407527342]]
        test_individuals  = _to_individual_fitness(test_values1)
        ideal = _calculate_ideal(ideal, test_individuals)

        self.assertTrue((ideal == np.array([0.0, 0.0, 7.349130527444723])).all())

    def test_ideal_point_update(self):
        test_values2 = [[215.178294844798, 341.2207743986504, 27.00931977903346], 
        [215.178294844798, 341.2207743986504, 27.00931977903346], 
        [241.07005005189296, 123.34339743816395, 249.77732989338517], 
        [337.84835229499396, 34.07219581485527, 194.8595057875817], 
        [241.07005005189296, 123.34339743816395, 249.77732989338517],
        [337.84835229499396, 34.07219581485527, 194.8595057875817], 
        [518.1400879625295, 99.22920421228126, 137.82943559666356], 
        [518.1400879625295, 99.22920421228126, 137.82943559666356], 
        [44.196603297676646, 251.31169426504135, 303.90251704336833], 
        [129.31186768667024, 217.89095690779163, 2.67050006022606],
        [153.5298564516061, 362.2700824452319, 135.88269335545854], 
        [290.0489640996921, 215.02426459326884, 235.13844362187476], 
        [78.1002549902273, 284.9889909739706, 224.67512034508485], 
        [44.196603297676646, 251.31169426504135, 303.90251704336833],
        [129.31186768667024, 217.89095690779163, 216.67050006022606], 
        [153.5298564516061, 362.2700824452319, 135.88269335545854], 
        [290.0489640996921, 215.02426459326884, 235.13844362187476], 
        [78.1002549902273, 284.9889909739706, 224.67512034508485], 
        [40.036368681192755, 239.98647907653876, 365.1315116176609], 
        [73.60191812969259, 85.7168838338835, 394.3761273474323], 
        [111.02389123772276, 30.654558955224044, 417.821454998326], 
        [-23.830405724920887, 89.00067028360232, 452.1959898060168], [
            114.854204032689, 169.88612536585308, 357.41669820709234], 
            [40.036368681192755, 239.98647907653876, 365.1315116176609], 
            [73.60191812969259, 85.7168838338835, 394.3761273474323], 
            [111.02389123772276, 30.654558955224044, 417.821454998326], 
            [23.830405724920887, 89.00067028360232, 452.1959898060168], 
            [114.854204032689, 169.88612536585308, 357.41669820709234]]
        test_individuals = _to_individual_fitness(test_values2)
        ideal = np.array([0.0, 0.0, 7.349130527444723])
        ideal = _calculate_ideal(ideal, test_individuals)
        self.assertTrue((ideal == np.array([-23.830405724920887, 0.0, 2.67050006022606])).all())

    def test_worst_point_initial(self):
        ##Ideal point initial test
        worst = None
        test_values1 = [
            [39.6809093261859, 78.95589182320498, 308.3212999529744], 
            [207.49730880005058, 272.8275352135604, 7.349130527444723], 
            [456.98037664700513, 40.54771379691928, 35.01332229667585], 
            [186.24322260124117, 2.8165811202693436, 182.57561907660292], 
            [169.26223028401003, 5.785818355238714, 290.75413504095286], 
            [100.5985566311103, 150.70463032094327, 170.27710817794312], 
            [451.2339015757547, 76.37546915887845, 42.826157092715135], 
            [6.15021593812187, 181.38492653497056, 81.72419505729094], 
            [0.0, 3.22, 308.3539407496831], 
            [671.3367979657985, 4.96887807671706, 43.09754186990102], 
            [45.787531575808394, 519.3476314387366, 14.826325407527342], 
            [39.6809093261859, 78.95589182320498, 308.3212999529744], 
            [207.49730880005058, 272.8275352135604, 7.349130527444723], 
            [456.98037664700513, 40.54771379691928, 35.01332229667585],
            [186.24322260124117, 2.8165811202693436, 182.57561907660292], 
            [169.26223028401003, 5.785818355238714, 290.75413504095286], 
            [100.5985566311103, 150.70463032094327, 170.27710817794312], 
            [451.2339015757547, 76.37546915887845, 42.826157092715135], 
            [6.15021593812187, 181.38492653497056, 81.72419505729094], 
            [0.0, 0.0, 308.3539407496831],
            [671.3367979657985, 4.96887807671706, 43.09754186990102], 
            [45.787531575808394, 519.3476314387366, 14.826325407527342]]
        test_individuals  = _to_individual_fitness(test_values1)
        worst = _calculate_worst(worst, test_individuals)

        self.assertTrue((worst == np.array([671.3367979657985, 519.3476314387366, 308.3539407496831])).all())

    def test_worst_point_update(self):
        test_values2 = [[215.178294844798, 341.2207743986504, 27.00931977903346], 
        [215.178294844798, 341.2207743986504, 27.00931977903346], 
        [241.07005005189296, 123.34339743816395, 249.77732989338517], 
        [337.84835229499396, 34.07219581485527, 194.8595057875817], 
        [241.07005005189296, 123.34339743816395, 249.77732989338517],
        [337.84835229499396, 34.07219581485527, 194.8595057875817], 
        [518.1400879625295, 99.22920421228126, 137.82943559666356], 
        [518.1400879625295, 99.22920421228126, 137.82943559666356], 
        [44.196603297676646, 251.31169426504135, 303.90251704336833], 
        [129.31186768667024, 217.89095690779163, 2.67050006022606],
        [153.5298564516061, 362.2700824452319, 135.88269335545854], 
        [290.0489640996921, 215.02426459326884, 235.13844362187476], 
        [78.1002549902273, 284.9889909739706, 224.67512034508485], 
        [44.196603297676646, 251.31169426504135, 303.90251704336833],
        [129.31186768667024, 217.89095690779163, 216.67050006022606], 
        [153.5298564516061, 362.2700824452319, 135.88269335545854], 
        [290.0489640996921, 215.02426459326884, 235.13844362187476], 
        [78.1002549902273, 284.9889909739706, 224.67512034508485], 
        [40.036368681192755, 239.98647907653876, 365.1315116176609], 
        [73.60191812969259, 85.7168838338835, 394.3761273474323], 
        [1111.02389123772276, 30.654558955224044, 417.821454998326], 
        [-23.830405724920887, 89.00067028360232, 452.1959898060168], [
            114.854204032689, 169.88612536585308, 357.41669820709234], 
            [40.036368681192755, 239.98647907653876, 365.1315116176609], 
            [73.60191812969259, 1285.7168838338835, 394.3761273474323], 
            [111.02389123772276, 30.654558955224044, 417.821454998326], 
            [23.830405724920887, 89.00067028360232, 452.1959898060168], 
            [114.854204032689, 169.88612536585308, 357.41669820709234]]
        test_individuals = _to_individual_fitness(test_values2)
        worst = np.array([671.3367979657985, 519.3476314387366, 308.3539407496831])
        worst = _calculate_worst(worst, test_individuals)
        self.assertTrue((worst == np.array([1111.02389123772276, 1285.7168838338835, 452.1959898060168])).all())

if __name__ == '__main__':
    unittest.main()




# nsga3 = NSGAIII(max_iter=20)
# final_front = nsga3.evolve(dtlz1_real_sbx, 92)




# ref_dirs =  get_reference_directions("das-dennis", 3, n_partitions=3)
# dtlz1_pf = get_problem("dtlz1", n_var=12, n_obj=3).pareto_front(ref_dirs)

# plot_mat_3d_lines([dtlz1_pf, ref_dirs], "", f"")